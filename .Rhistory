"É. Zemmour" = "navyblue")
#Moyenne des données
moy_votes = mean(dataset_cleaned$total_votes)
moy_abs = mean(dataset_cleaned$total_abs)
moy_votes_candidat <- c("N. Arthaud" = mean(dataset_cleaned$total_arthaud),
"P. Poutou" = mean(dataset_cleaned$total_poutou),
"F. Roussel" = mean(dataset_cleaned$total_roussel),
"J-L. Mélenchon" = mean(dataset_cleaned$total_melenchon),
"A. Hidalgo" = mean(dataset_cleaned$total_hidalgo),
"Y. Jadot" = mean(dataset_cleaned$total_jadot),
"E. Macron" = mean(dataset_cleaned$total_macron),
"J. Lassalle" = mean(dataset_cleaned$total_lassalle),
"V. Pecresse" = mean(dataset_cleaned$total_pecresse),
"M. Le Pen" = mean(dataset_cleaned$total_lepen),
"N. Dupont-Aignan" = mean(dataset_cleaned$total_dupontaignan),
"É. Zemmour" = mean(dataset_cleaned$total_zemmour))
moy_votes_candidat_filtre = sort(moy_votes_candidat)
etendue = max(moy_votes_candidat) - min(moy_votes_candidat)
# Données
noms_candidats <- names(moy_votes_candidat_filtre)
moyennes_votes <- unname(moy_votes_candidat_filtre)
# Création du diagramme circulaire
pie(moyennes_votes, labels = "", main = "Répartition des votes par candidat", col = candidate_colors[noms_candidats])
# Ajout d'une légende à côté du diagramme circulaire
legend("right", legend = noms_candidats, fill = candidate_colors[noms_candidats], title = "Candidats", cex = 0.7)
# Changement de noms de départements
names(dataset_cleaned)[1] <- "region"
dataset_cleaned$region <- stri_trans_general(dataset_cleaned$region, "Latin-ASCII") %>%
str_replace_all("Cote-d'Or", "Cote-Dor") %>%
str_replace_all("Cotes-d'Armor", "Cotes-Darmor") %>%
str_replace_all("Corse-du-Sud", "Corse du Sud") %>%
str_replace_all("Val-d'Oise", "Val-Doise") %>%
str_replace_all("Corse-du-Sud", "Corse du Sud")
# Récupération de la carte de France
map <- map_data("france")
# Filtrage des départements pour ne garder que la France métropolitaine
dataset_cleaned_filtered <- dataset_cleaned %>%
filter(region %in% map$region)
# Fusion avec les données de la carte
result_map <- left_join(x = map[,-6], y = dataset_cleaned_filtered)
# On cherche ici le candidat en tête dans chaque département
result_map <- result_map %>%
rowwise() %>%
mutate(candidat_gagnant = case_when(
total_arthaud == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "N. Arthaud",
total_roussel == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "F. Roussel",
total_macron == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "E. Macron",
total_lassalle == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "J. Lassalle",
total_lepen == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "M. Le Pen",
total_zemmour == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "É. Zemmour",
total_melenchon == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "J-L. Mélenchon",
total_hidalgo == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "A. Hidalgo",
total_jadot == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "Y. Jadot",
total_pecresse == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "V. Pécresse",
total_poutou == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "P. Poutou",
total_dupontaignan == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "N. Dupont-Aignan",
TRUE ~ NA_character_
))
# Apparence de la carte
map_theme <- theme(title=element_text(),
plot.title=element_text(margin=margin(20,20,20,20), size=18, hjust = 0.5),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major= element_blank(),
panel.background= element_blank())
# Création de la carte
ggplot(result_map, aes(long, lat, group = group, fill = candidat_gagnant)) +
geom_polygon() +
geom_path(color = "white", size = 0.3) + # On ajoute la frontière entre les départements
coord_map() +
scale_fill_manual(values = candidate_colors, name = "Candidat arrivé en tête") +
labs(x = "",
y = "",
title = "Candidat arrivé en tête par département au premier tour des présidentielles 2022",
subtitle = "Données via data.gouv") +
map_theme
# Régression linéaire
graph_reg_lin <- function(x, y , x_lab, y_lab,main_lab) {
modele_regression <- lm(y ~ x)
plot(x, y,
xlab = x_lab,
ylab = y_lab,
main = main_lab,
pch = 19, col = "blue")
abline(modele_regression, col = "red")
legend("topleft", legend = c("Données", "Ligne de régression"),
col = c("blue", "red"), pch = c(19, NA), lty = c(NA, 1),
title = "Légende", cex = 0.3)
}
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_macron, "Total des votes par département","Total des votes pour Macron par département","Relation entre les votes pour Macron et le total des votes")
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_arthaud, "Total des votes par département","Total des votes pour Arthaud par département","Relation entre les votes pour Arthaud et le total des votes")
library(class)
# Sélection des variables pour la prédiction
features <- c("total_votes", "total_blancs", "pourcentage_blanc", "total_abs", "pourcentage_abs", "total_arthaud", "pourcentage_arthaud", "total_roussel", "pourcentage_roussel", "total_macron", "pourcentage_macron", "total_lassalle", "pourcentage_lassalle", "total_lepen", "pourcentage_lepen", "total_zemmour", "pourcentage_zemmour", "total_melenchon", "pourcentage_melenchon", "total_hidalgo", "pourcentage_hidalgo", "total_jadot", "pourcentage_jadot", "total_pecresse", "pourcentage_pecresse", "total_poutou", "pourcentage_poutou", "total_dupontaignan", "pourcentage_dupontaignan")
# Créez une nouvelle colonne 'candidat_gagnant' basée sur le pourcentage le plus élevé
dataset_cleaned$candidat_gagnant <- apply(dataset_cleaned[, grep("pourcentage_", names(dataset_cleaned))], 1, function(x) names(x)[which.max(x)])
# Séparation des données en ensembles d'entraînement et de test
set.seed(123)  # pour reproduire les résultats
train_indices <- sample(nrow(dataset_cleaned), nrow(dataset_cleaned) * 0.7)
train_data <- dataset_cleaned[train_indices, ]
test_data <- dataset_cleaned[-train_indices, ]
# Entraînement du modèle KNN
k <- 3  # ajustez la valeur de k selon votre choix
knn_model <- knn(train = train_data[, features],
test = test_data[, features],
cl = train_data$candidat_gagnant,
k = k)
# Évaluation des performances
accuracy <- sum(knn_model == test_data$candidat_gagnant) / length(test_data$candidat_gagnant)
cat("Précision du modèle KNN :", round(accuracy * 100, 2), "%\n")
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Ajouter la valeur maximale de POP pour chaque année et chaque département
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Ajouter la colonne pour le taux de criminalité pour 1000 habitants
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Ajouter "20" devant chaque année
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Afficher les premières lignes du résultat
head(crime_departement_annee)
data_merged <- merge(crime_departement_annee, dataset_cleaned_filtered, by.x = "CodeDépartement", by.y = "Code du département")
ggplot(data_merged, aes(x = taux_crime_par_1000, y = pourcentage_macron)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue") + # Régression linéaire avec erreur standard
labs(title = "Régression linéaire entre taux de crime et votes pour Macron",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage de votes pour Macron") +
theme_minimal()
ggplot(data_merged, aes(x = taux_crime_par_1000, y = pourcentage_lepen)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue") + # Régression linéaire avec erreur standard
labs(title = "Régression linéaire entre taux de crime et votes pour Lepen",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage de votes pour Lepen") +
theme_minimal()
data_merged$annee <- as.factor(data_merged$annee) # Année est un facteur du dataset
valeurs_pch <- setNames(c(0, 1, 2, 3, 4, 5, 6, 7), levels(data_merged$annee)) # Map de l'année vers des valeurs PCH (attendues pour les formes sur le graphique)
# Creating the overlay plot
ggplot(data_merged, aes(x = taux_crime_par_1000)) + # Valeur commune sur x, le taux de crime
geom_point(aes(y = pourcentage_macron, color = "Macron", shape = annee), alpha = 0.5) +  # Pourcentages Macron
geom_smooth(aes(y = pourcentage_macron, color = "Macron"), method = "lm", se = TRUE) +  # Regression linéaire pour Macron
geom_point(aes(y = pourcentage_lepen, color = "Le Pen", shape = annee), alpha = 0.5) +  # Pourcentages Le Pen
geom_smooth(aes(y = pourcentage_lepen, color = "Le Pen"), method = "lm", se = TRUE) +  # Regression linéaire pour LePen
geom_point(aes(y = pourcentage_zemmour, color ="Zemmour", shape = annee) , alpha = 0.5) +  # Pourcentages Zemmour
geom_smooth(aes(y = pourcentage_zemmour, color ="Zemmour"), method = "lm", se = TRUE) +  # Regression linéaire pour Zemmour
geom_point(aes(y = pourcentage_melenchon, color ="Mélenchon", shape = annee) , alpha = 0.5) +  # Pourcentages Zemmour
geom_smooth(aes(y = pourcentage_melenchon, color ="Mélenchon"), method = "lm", se = TRUE) +  # Regression linéaire pour Zemmour
labs(title = "Régression comparative entre le taux de crime et les votes sur les candidats",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage des votes",
color = "Candidat",
shape = "Année") +
theme_minimal() +
scale_color_manual(values = c("Macron" = "blue", "Le Pen" = "red", "Zemmour" = "green", "Mélenchon" = "purple")) +
scale_shape_manual(values = valeurs_pch)
library(tidyverse)
library(stringr)
library(stringi)
library(readxl)
library(dplyr)
library(tidyr)
library(MASS)
# Récupération des résultats
dataset <- read_xlsx("dataset_elections.xlsx")
# Nettoyage des données et aggrégation des résultats
dataset_cleaned <- dataset %>%
group_by(`Libellé du département`, `Code du département`) %>%
summarise(total_votes = sum(Exprimés),
total_blancs = sum(Blancs),
pourcentage_blanc = total_blancs / sum(Votants) * 100,
total_abs = sum(as.numeric(Abstentions)),
pourcentage_abs = total_abs / sum(as.numeric(Inscrits))* 100,
total_arthaud = sum(VoixArthaud),
pourcentage_arthaud = total_arthaud / total_votes * 100,
total_roussel = sum(VoixRoussel),
pourcentage_roussel = total_roussel / total_votes * 100,
total_macron = sum(VoixMacron),
pourcentage_macron = total_macron / total_votes * 100,
total_lassalle = sum(VoixLassalle),
pourcentage_lassalle = total_lassalle / total_votes * 100,
total_lepen = sum(VoixLePen),
pourcentage_lepen = total_lepen / total_votes * 100,
total_zemmour = sum(VoixZemmour),
pourcentage_zemmour = total_zemmour / total_votes * 100,
total_melenchon = sum(VoixMelenchon),
pourcentage_melenchon = total_melenchon / total_votes * 100,
total_hidalgo = sum(VoixHidalgo),
pourcentage_hidalgo = total_hidalgo / total_votes * 100,
total_jadot = sum(VoixJadot),
pourcentage_jadot = total_jadot / total_votes * 100,
total_pecresse = sum(VoixPecresse),
pourcentage_pecresse = total_pecresse / total_votes * 100,
total_poutou = sum(VoixPoutou),
pourcentage_poutou = total_poutou / total_votes * 100,
total_dupontaignan = sum(VoixDupontAignan),
pourcentage_dupontaignan = total_dupontaignan / total_votes * 100)
# Couleur pour les candidats
total_votes = sum(dataset_cleaned$total_votes)
candidate_pourcentage <- c("N. Arthaud" = sum(dataset_cleaned$total_arthaud)/total_votes*100,
"P. Poutou" = sum(dataset_cleaned$total_poutou)/total_votes*100,
"F. Roussel" = sum(dataset_cleaned$total_roussel)/total_votes*100,
"J-L. Mélenchon" = sum(dataset_cleaned$total_melenchon)/total_votes*100,
"A. Hidalgo" = sum(dataset_cleaned$total_hidalgo)/total_votes*100,
"Y. Jadot" = sum(dataset_cleaned$total_jadot)/total_votes*100,
"E. Macron" = sum(dataset_cleaned$total_macron)/total_votes*100,
"J. Lassalle" = sum(dataset_cleaned$total_lassalle)/total_votes*100,
"V. Pecresse" = sum(dataset_cleaned$total_pecresse)/total_votes*100,
"M. Le Pen" = sum(dataset_cleaned$total_lepen)/total_votes*100,
"N. Dupont-Aignan" = sum(dataset_cleaned$total_dupontaignan)/total_votes*100,
"É. Zemmour" = sum(dataset_cleaned$total_zemmour)/total_votes*100)
#pourcentage
candidate_pourcentage_total <- c("N. Arthaud" = "red4",
"P. Poutou" = "red3",
"F. Roussel" = "red2",
"J-L. Mélenchon" = "tomato2",
"A. Hidalgo" = "salmon2",
"Y. Jadot" = "springgreen4",
"E. Macron" = "goldenrod1",
"J. Lassalle" = "lightblue",
"V. Pecresse" = "royalblue1",
"M. Le Pen" = "blue2",
"N. Dupont-Aignan" = "blue3",
"É. Zemmour" = "navyblue")
#Moyenne des données
moy_votes = mean(dataset_cleaned$total_votes)
moy_abs = mean(dataset_cleaned$total_abs)
moy_votes_candidat <- c("N. Arthaud" = mean(dataset_cleaned$total_arthaud),
"P. Poutou" = mean(dataset_cleaned$total_poutou),
"F. Roussel" = mean(dataset_cleaned$total_roussel),
"J-L. Mélenchon" = mean(dataset_cleaned$total_melenchon),
"A. Hidalgo" = mean(dataset_cleaned$total_hidalgo),
"Y. Jadot" = mean(dataset_cleaned$total_jadot),
"E. Macron" = mean(dataset_cleaned$total_macron),
"J. Lassalle" = mean(dataset_cleaned$total_lassalle),
"V. Pecresse" = mean(dataset_cleaned$total_pecresse),
"M. Le Pen" = mean(dataset_cleaned$total_lepen),
"N. Dupont-Aignan" = mean(dataset_cleaned$total_dupontaignan),
"É. Zemmour" = mean(dataset_cleaned$total_zemmour))
moy_votes_candidat_filtre = sort(moy_votes_candidat)
etendue = max(moy_votes_candidat) - min(moy_votes_candidat)
# Données
noms_candidats <- names(moy_votes_candidat_filtre)
moyennes_votes <- unname(moy_votes_candidat_filtre)
# Création du diagramme circulaire
pie(moyennes_votes, labels = "", main = "Répartition des votes par candidat", col = candidate_colors[noms_candidats])
# Ajout d'une légende à côté du diagramme circulaire
legend("right", legend = noms_candidats, fill = candidate_colors[noms_candidats], title = "Candidats", cex = 0.7)
# Changement de noms de départements
names(dataset_cleaned)[1] <- "region"
dataset_cleaned$region <- stri_trans_general(dataset_cleaned$region, "Latin-ASCII") %>%
str_replace_all("Cote-d'Or", "Cote-Dor") %>%
str_replace_all("Cotes-d'Armor", "Cotes-Darmor") %>%
str_replace_all("Corse-du-Sud", "Corse du Sud") %>%
str_replace_all("Val-d'Oise", "Val-Doise") %>%
str_replace_all("Corse-du-Sud", "Corse du Sud")
# Récupération de la carte de France
map <- map_data("france")
# Filtrage des départements pour ne garder que la France métropolitaine
dataset_cleaned_filtered <- dataset_cleaned %>%
filter(region %in% map$region)
# Fusion avec les données de la carte
result_map <- left_join(x = map[,-6], y = dataset_cleaned_filtered)
# On cherche ici le candidat en tête dans chaque département
result_map <- result_map %>%
rowwise() %>%
mutate(candidat_gagnant = case_when(
total_arthaud == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "N. Arthaud",
total_roussel == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "F. Roussel",
total_macron == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "E. Macron",
total_lassalle == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "J. Lassalle",
total_lepen == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "M. Le Pen",
total_zemmour == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "É. Zemmour",
total_melenchon == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "J-L. Mélenchon",
total_hidalgo == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "A. Hidalgo",
total_jadot == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "Y. Jadot",
total_pecresse == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "V. Pécresse",
total_poutou == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "P. Poutou",
total_dupontaignan == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "N. Dupont-Aignan",
TRUE ~ NA_character_
))
# Apparence de la carte
map_theme <- theme(title=element_text(),
plot.title=element_text(margin=margin(20,20,20,20), size=18, hjust = 0.5),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major= element_blank(),
panel.background= element_blank())
# Création de la carte
ggplot(result_map, aes(long, lat, group = group, fill = candidat_gagnant)) +
geom_polygon() +
geom_path(color = "white", size = 0.3) + # On ajoute la frontière entre les départements
coord_map() +
scale_fill_manual(values = candidate_colors, name = "Candidat arrivé en tête") +
labs(x = "",
y = "",
title = "Candidat arrivé en tête par département au premier tour des présidentielles 2022",
subtitle = "Données via data.gouv") +
map_theme
# Régression linéaire
graph_reg_lin <- function(x, y , x_lab, y_lab,main_lab) {
modele_regression <- lm(y ~ x)
plot(x, y,
xlab = x_lab,
ylab = y_lab,
main = main_lab,
pch = 19, col = "blue")
abline(modele_regression, col = "red")
legend("topleft", legend = c("Données", "Ligne de régression"),
col = c("blue", "red"), pch = c(19, NA), lty = c(NA, 1),
title = "Légende", cex = 0.3)
}
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_macron, "Total des votes par département","Total des votes pour Macron par département","Relation entre les votes pour Macron et le total des votes")
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_arthaud, "Total des votes par département","Total des votes pour Arthaud par département","Relation entre les votes pour Arthaud et le total des votes")
library(class)
# Sélection des variables pour la prédiction
features <- c("total_votes", "total_blancs", "pourcentage_blanc", "total_abs", "pourcentage_abs", "total_arthaud", "pourcentage_arthaud", "total_roussel", "pourcentage_roussel", "total_macron", "pourcentage_macron", "total_lassalle", "pourcentage_lassalle", "total_lepen", "pourcentage_lepen", "total_zemmour", "pourcentage_zemmour", "total_melenchon", "pourcentage_melenchon", "total_hidalgo", "pourcentage_hidalgo", "total_jadot", "pourcentage_jadot", "total_pecresse", "pourcentage_pecresse", "total_poutou", "pourcentage_poutou", "total_dupontaignan", "pourcentage_dupontaignan")
# Créez une nouvelle colonne 'candidat_gagnant' basée sur le pourcentage le plus élevé
dataset_cleaned$candidat_gagnant <- apply(dataset_cleaned[, grep("pourcentage_", names(dataset_cleaned))], 1, function(x) names(x)[which.max(x)])
# Séparation des données en ensembles d'entraînement et de test
set.seed(123)  # pour reproduire les résultats
train_indices <- sample(nrow(dataset_cleaned), nrow(dataset_cleaned) * 0.7)
train_data <- dataset_cleaned[train_indices, ]
test_data <- dataset_cleaned[-train_indices, ]
# Entraînement du modèle KNN
k <- 3  # ajustez la valeur de k selon votre choix
knn_model <- knn(train = train_data[, features],
test = test_data[, features],
cl = train_data$candidat_gagnant,
k = k)
# Évaluation des performances
accuracy <- sum(knn_model == test_data$candidat_gagnant) / length(test_data$candidat_gagnant)
cat("Précision du modèle KNN :", round(accuracy * 100, 2), "%\n")
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Ajouter la valeur maximale de POP pour chaque année et chaque département
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Ajouter la colonne pour le taux de criminalité pour 1000 habitants
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Ajouter "20" devant chaque année
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Afficher les premières lignes du résultat
head(crime_departement_annee)
library(readxl)
dataset_chomage <- read_xls("dataset_chomage.xls")
# Sélection des colonnes se terminant par les années spécifiées
cols_to_keep <- grep("2016$|2017$|2018$|2019$|2020$|2021$|2022$|2023$", names(dataset_chomage), value = TRUE)
# Sélection des colonnes "Code" et "Libellé" en les ajoutant aux colonnes filtrées
cols_to_keep <- c("Code", "Libellé", cols_to_keep)
# Création du nouveau dataframe avec les colonnes sélectionnées
dataset_chomage_filtered <- dataset_chomage[, cols_to_keep]
# Sélection des colonnes se terminant par les années spécifiées
cols_to_keep <- grep("T[1-4]_201[6-9]|T[1-4]_202[0-3]", names(dataset_chomage), value = TRUE)
# Calcul de la moyenne pour chaque année
dataset_chomage_filtered$Moyenne_2016 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2016", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2017 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2017", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2018 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2018", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2019 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2019", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2020 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2020", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2021 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2021", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2022 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2022", names(dataset_chomage_filtered))])
dataset_chomage_filtered$Moyenne_2023 <- rowMeans(dataset_chomage_filtered[, grepl("T[1-4]_2023", names(dataset_chomage_filtered))])
library(dplyr)
# Sélection des colonnes à conserver (code, libellé et moyennes)
cols_to_keep <- c("Code", "Libellé", paste0("Moyenne_", 2016:2023))
# Création d'un nouveau dataframe avec les colonnes sélectionnées
dataset_chomage_filtered <- dataset_chomage_filtered %>%
select(cols_to_keep)
# Affichage des premières lignes du résultat
head(dataset_chomage_filtered)
data_merged <- merge(crime_departement_annee, dataset_cleaned_filtered, by.x = "CodeDépartement", by.y = "Code du département")
ggplot(data_merged, aes(x = taux_crime_par_1000, y = pourcentage_macron)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue") + # Régression linéaire avec erreur standard
labs(title = "Régression linéaire entre taux de crime et votes pour Macron",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage de votes pour Macron") +
theme_minimal()
ggplot(data_merged, aes(x = taux_crime_par_1000, y = pourcentage_lepen)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "blue") + # Régression linéaire avec erreur standard
labs(title = "Régression linéaire entre taux de crime et votes pour Lepen",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage de votes pour Lepen") +
theme_minimal()
data_merged$annee <- as.factor(data_merged$annee) # Année est un facteur du dataset
valeurs_pch <- setNames(c(0, 1, 2, 3, 4, 5, 6, 7), levels(data_merged$annee)) # Map de l'année vers des valeurs PCH (attendues pour les formes sur le graphique)
# Creating the overlay plot
ggplot(data_merged, aes(x = taux_crime_par_1000)) + # Valeur commune sur x, le taux de crime
geom_point(aes(y = pourcentage_macron, color = "Macron", shape = annee), alpha = 0.5) +  # Pourcentages Macron
geom_smooth(aes(y = pourcentage_macron, color = "Macron"), method = "lm", se = TRUE) +  # Regression linéaire pour Macron
geom_point(aes(y = pourcentage_lepen, color = "Le Pen", shape = annee), alpha = 0.5) +  # Pourcentages Le Pen
geom_smooth(aes(y = pourcentage_lepen, color = "Le Pen"), method = "lm", se = TRUE) +  # Regression linéaire pour LePen
geom_point(aes(y = pourcentage_zemmour, color ="Zemmour", shape = annee) , alpha = 0.5) +  # Pourcentages Zemmour
geom_smooth(aes(y = pourcentage_zemmour, color ="Zemmour"), method = "lm", se = TRUE) +  # Regression linéaire pour Zemmour
geom_point(aes(y = pourcentage_melenchon, color ="Mélenchon", shape = annee) , alpha = 0.5) +  # Pourcentages Zemmour
geom_smooth(aes(y = pourcentage_melenchon, color ="Mélenchon"), method = "lm", se = TRUE) +  # Regression linéaire pour Zemmour
labs(title = "Régression comparative entre le taux de crime et les votes sur les candidats",
x = "Taux de crime par 1000 personnes",
y = "Pourcentage des votes",
color = "Candidat",
shape = "Année") +
theme_minimal() +
scale_color_manual(values = c("Macron" = "blue", "Le Pen" = "red", "Zemmour" = "green", "Mélenchon" = "purple")) +
scale_shape_manual(values = valeurs_pch)
