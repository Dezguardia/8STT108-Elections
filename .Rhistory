geom_path(color = "white", size = 0.3) + # On ajoute la frontière entre les départements
coord_map() +
scale_fill_manual(values = candidate_colors, name = "Candidat arrivé en tête") +
labs(x = "",
y = "",
title = "Candidat arrivé en tête par département au premier tour des présidentielles 2022",
subtitle = "Données via data.gouv") +
map_theme
# Régression linéaire
graph_reg_lin <- function(x, y , x_lab, y_lab,main_lab) {
modele_regression <- lm(y ~ x)
plot(x, y,
xlab = x_lab,
ylab = y_lab,
main = main_lab,
pch = 19, col = "blue")
abline(modele_regression, col = "red")
legend("topleft", legend = c("Données", "Ligne de régression"),
col = c("blue", "red"), pch = c(19, NA), lty = c(NA, 1),
title = "Légende", cex = 0.3)
}
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_macron, "Total des votes par département","Total des votes pour Macron par département","Relation entre les votes pour Macron et le total des votes")
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_arthaud, "Total des votes par département","Total des votes pour Arthaud par département","Relation entre les votes pour Arthaud et le total des votes")
library(class)
# Sélection des variables pour la prédiction
features <- c("total_votes", "total_blancs", "pourcentage_blanc", "total_abs", "pourcentage_abs", "total_arthaud", "pourcentage_arthaud", "total_roussel", "pourcentage_roussel", "total_macron", "pourcentage_macron", "total_lassalle", "pourcentage_lassalle", "total_lepen", "pourcentage_lepen", "total_zemmour", "pourcentage_zemmour", "total_melenchon", "pourcentage_melenchon", "total_hidalgo", "pourcentage_hidalgo", "total_jadot", "pourcentage_jadot", "total_pecresse", "pourcentage_pecresse", "total_poutou", "pourcentage_poutou", "total_dupontaignan", "pourcentage_dupontaignan")
# Créez une nouvelle colonne 'candidat_gagnant' basée sur le pourcentage le plus élevé
dataset_cleaned$candidat_gagnant <- apply(dataset_cleaned[, grep("pourcentage_", names(dataset_cleaned))], 1, function(x) names(x)[which.max(x)])
# Séparation des données en ensembles d'entraînement et de test
set.seed(123)  # pour reproduire les résultats
train_indices <- sample(nrow(dataset_cleaned), nrow(dataset_cleaned) * 0.7)
train_data <- dataset_cleaned[train_indices, ]
test_data <- dataset_cleaned[-train_indices, ]
# Entraînement du modèle KNN
k <- 3  # ajustez la valeur de k selon votre choix
knn_model <- knn(train = train_data[, features],
test = test_data[, features],
cl = train_data$candidat_gagnant,
k = k)
# Évaluation des performances
accuracy <- sum(knn_model == test_data$candidat_gagnant) / length(test_data$candidat_gagnant)
cat("Précision du modèle KNN :", round(accuracy * 100, 2), "%\n")
knitr::opts_chunk$set(echo = TRUE)
dataset_crime <- read.csv("dataset_crime.csv")
dataset_chomage <- read_xls("dataset_chomage.xls")
View(dataset_crime)
dataset_chomage <- read.xls("dataset_chomage.xls")
dataset_chomage <- read_xls("dataset_chomage.xls")
library(readxl)
dataset_chomage <- read_xls("dataset_chomage.xls")
View(dataset_chomage)
library(tidyverse)
library(stringr)
library(stringi)
library(readxl)
library(dplyr)
library(MASS)
# Récupération des résultats
dataset <- read_xlsx("dataset_elections.xlsx")
# Nettoyage des données et aggrégation des résultats
dataset_cleaned <- dataset %>%
group_by(`Libellé du département`) %>%
summarise(total_votes = sum(Exprimés),
total_blancs = sum(Blancs),
pourcentage_blanc = total_blancs / sum(Votants) * 100,
total_abs = sum(as.numeric(Abstentions)),
pourcentage_abs = total_abs / sum(as.numeric(Inscrits))* 100,
total_arthaud = sum(VoixArthaud),
pourcentage_arthaud = total_arthaud / total_votes * 100,
total_roussel = sum(VoixRoussel),
pourcentage_roussel = total_roussel / total_votes * 100,
total_macron = sum(VoixMacron),
pourcentage_macron = total_macron / total_votes * 100,
total_lassalle = sum(VoixLassalle),
pourcentage_lassalle = total_lassalle / total_votes * 100,
total_lepen = sum(VoixLePen),
pourcentage_lepen = total_lepen / total_votes * 100,
total_zemmour = sum(VoixZemmour),
pourcentage_zemmour = total_zemmour / total_votes * 100,
total_melenchon = sum(VoixMelenchon),
pourcentage_melenchon = total_melenchon / total_votes * 100,
total_hidalgo = sum(VoixHidalgo),
pourcentage_hidalgo = total_hidalgo / total_votes * 100,
total_jadot = sum(VoixJadot),
pourcentage_jadot = total_jadot / total_votes * 100,
total_pecresse = sum(VoixPecresse),
pourcentage_pecresse = total_pecresse / total_votes * 100,
total_poutou = sum(VoixPoutou),
pourcentage_poutou = total_poutou / total_votes * 100,
total_dupontaignan = sum(VoixDupontAignan),
pourcentage_dupontaignan = total_dupontaignan / total_votes * 100)
# Couleur pour les candidats
total_votes = sum(dataset_cleaned$total_votes)
candidate_pourcentage <- c("N. Arthaud" = sum(dataset_cleaned$total_arthaud)/total_votes*100,
"P. Poutou" = sum(dataset_cleaned$total_poutou)/total_votes*100,
"F. Roussel" = sum(dataset_cleaned$total_roussel)/total_votes*100,
"J-L. Mélenchon" = sum(dataset_cleaned$total_melenchon)/total_votes*100,
"A. Hidalgo" = sum(dataset_cleaned$total_hidalgo)/total_votes*100,
"Y. Jadot" = sum(dataset_cleaned$total_jadot)/total_votes*100,
"E. Macron" = sum(dataset_cleaned$total_macron)/total_votes*100,
"J. Lassalle" = sum(dataset_cleaned$total_lassalle)/total_votes*100,
"V. Pecresse" = sum(dataset_cleaned$total_pecresse)/total_votes*100,
"M. Le Pen" = sum(dataset_cleaned$total_lepen)/total_votes*100,
"N. Dupont-Aignan" = sum(dataset_cleaned$total_dupontaignan)/total_votes*100,
"É. Zemmour" = sum(dataset_cleaned$total_zemmour)/total_votes*100)
#pourcentage
candidate_pourcentage_total <- c("N. Arthaud" = "red4",
"P. Poutou" = "red3",
"F. Roussel" = "red2",
"J-L. Mélenchon" = "tomato2",
"A. Hidalgo" = "salmon2",
"Y. Jadot" = "springgreen4",
"E. Macron" = "goldenrod1",
"J. Lassalle" = "lightblue",
"V. Pecresse" = "royalblue1",
"M. Le Pen" = "blue2",
"N. Dupont-Aignan" = "blue3",
"É. Zemmour" = "navyblue")
#Moyenne des données
moy_votes = mean(dataset_cleaned$total_votes)
moy_abs = mean(dataset_cleaned$total_abs)
moy_votes_candidat <- c("N. Arthaud" = mean(dataset_cleaned$total_arthaud),
"P. Poutou" = mean(dataset_cleaned$total_poutou),
"F. Roussel" = mean(dataset_cleaned$total_roussel),
"J-L. Mélenchon" = mean(dataset_cleaned$total_melenchon),
"A. Hidalgo" = mean(dataset_cleaned$total_hidalgo),
"Y. Jadot" = mean(dataset_cleaned$total_jadot),
"E. Macron" = mean(dataset_cleaned$total_macron),
"J. Lassalle" = mean(dataset_cleaned$total_lassalle),
"V. Pecresse" = mean(dataset_cleaned$total_pecresse),
"M. Le Pen" = mean(dataset_cleaned$total_lepen),
"N. Dupont-Aignan" = mean(dataset_cleaned$total_dupontaignan),
"É. Zemmour" = mean(dataset_cleaned$total_zemmour))
moy_votes_candidat_filtre = sort(moy_votes_candidat)
etendue = max(moy_votes_candidat) - min(moy_votes_candidat)
# Données
noms_candidats <- names(moy_votes_candidat_filtre)
moyennes_votes <- unname(moy_votes_candidat_filtre)
# Création du diagramme circulaire
pie(moyennes_votes, labels = "", main = "Répartition des votes par candidat", col = candidate_colors[noms_candidats])
crime_data <- read.csv("dataset_crime.csv")
# Nettoyer les données et récupérer les crimes par département
crime_departement <- crime_data %>%
group_by(Code.département) %>%
summarise(total_crimes = sum(faits))
View(crime_data)
crime_data <- read.csv("dataset_crime.csv")
# Nettoyer les données et récupérer les crimes par département
crime_departement <- crime_data %>%
group_by(département) %>%
summarise(total_crimes = sum(faits))
head(crime_data)
summary(crime_data)
crime_data <- read.csv("dataset_crime.csv")
View(crime_data)
View(crime_data)
View(crime_data)
View(crime_data)
summary(crime_data)
crime_data <- read.csv("dataset_crime.csv")
View(crime_data)
View(crime_data)
crime_data <- read.xlsx("dataset_crime.xlsx")
library(readxl)
crime_data <- read.xlsx("dataset_crime.xlsx")
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Nettoyer les données et récupérer les crimes par département
crime_departement <- crime_data %>%
group_by(CodeDépartement) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement <- select(crime_departement, Code.département, total_crimes)
View(crime_departement)
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data %>%
group_by(Code.département, annee) %>%
summarise(total_crimes = sum(faits))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, Code.département, annee, total_crimes)
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
View(crime_departement)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975 et 976
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975 et 976
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, NA))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975 et 976
crime_data_filtre <- crime_data %>%
filter( !is.na(CodeDépartement) & !CodeDépartement %in% c(971, 972, 973, 974, 975, 976))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975 et 976
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
crime_data <- read_xlsx("dataset_crime.xlsx")
library(readxl)
library(dplyr)
crime_data <- read_xlsx("dataset_crime.xlsx")
summary(crime_data)
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975 et 976
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, tauxpourmille, total_crimes)
View(crime_data)
View(crime_departement_annee)
library(dplyr)
# Charger le jeu de données
crime_data <- read.csv("votre_fichier.csv")  # Remplacez "votre_fichier.csv" par le nom de votre fichier
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")  # Remplacez "votre_fichier.csv" par le nom de votre fichier
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!is.na(Code.département) & !Code.département %in% c(971, 972, 973, 974, 975, 976))
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")  # Remplacez "votre_fichier.csv" par le nom de votre fichier
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Fusionner avec crime_data pour ajouter la colonne tauxpourmille
crime_departement_annee <- left_join(crime_departement_annee, crime_data %>%
select(CodeDépartement, annee, tauxpourmille),
by = c("CodeDépartement", "annee"))
# Afficher les premières lignes du résultat
head(crime_departement_annee)
View(crime_departement_annee)
View(crime_data)
View(crime_departement_annee)
View(crime_departement_annee)
View(crime_departement_annee)
View(crime_departement_annee)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")  # Remplacez "votre_fichier.csv" par le nom de votre fichier
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Fusionner avec crime_data pour ajouter la colonne tauxpourmille
crime_departement_annee <- left_join(crime_departement_annee, crime_data %>%
select(CodeDépartement, annee, max(POP)),
by = c("CodeDépartement", "annee"))
View(crime_data)
View(crime_data)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read.csv("votre_fichier.csv")  # Remplacez "votre_fichier.csv" par le nom de votre fichier
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read.xlsx("dataset_crime.xlsx")
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Afficher les premières lignes du résultat
head(crime_departement_annee)
View(crime_departement_annee)
View(crime_data)
View(crime_departement_annee)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Ajouter la valeur maximale de POP pour chaque année et chaque département
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(max_POP = max(POP)),
by = c("CodeDépartement", "annee"))
# Afficher les premières lignes du résultat
head(crime_departement_annee)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Ajouter la valeur maximale de POP pour chaque année et chaque département
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(max_POP = max(POP)),
by = c("CodeDépartement", "annee"))
# Afficher les premières lignes du résultat
head(crime_departement_annee)
View(crime_departement_annee)
library(tidyverse)
library(stringr)
library(stringi)
library(readxl)
library(dplyr)
library(MASS)
# Récupération des résultats
dataset <- read_xlsx("dataset_elections.xlsx")
# Nettoyage des données et aggrégation des résultats
dataset_cleaned <- dataset %>%
group_by(`Libellé du département`) %>%
summarise(total_votes = sum(Exprimés),
total_blancs = sum(Blancs),
pourcentage_blanc = total_blancs / sum(Votants) * 100,
total_abs = sum(as.numeric(Abstentions)),
pourcentage_abs = total_abs / sum(as.numeric(Inscrits))* 100,
total_arthaud = sum(VoixArthaud),
pourcentage_arthaud = total_arthaud / total_votes * 100,
total_roussel = sum(VoixRoussel),
pourcentage_roussel = total_roussel / total_votes * 100,
total_macron = sum(VoixMacron),
pourcentage_macron = total_macron / total_votes * 100,
total_lassalle = sum(VoixLassalle),
pourcentage_lassalle = total_lassalle / total_votes * 100,
total_lepen = sum(VoixLePen),
pourcentage_lepen = total_lepen / total_votes * 100,
total_zemmour = sum(VoixZemmour),
pourcentage_zemmour = total_zemmour / total_votes * 100,
total_melenchon = sum(VoixMelenchon),
pourcentage_melenchon = total_melenchon / total_votes * 100,
total_hidalgo = sum(VoixHidalgo),
pourcentage_hidalgo = total_hidalgo / total_votes * 100,
total_jadot = sum(VoixJadot),
pourcentage_jadot = total_jadot / total_votes * 100,
total_pecresse = sum(VoixPecresse),
pourcentage_pecresse = total_pecresse / total_votes * 100,
total_poutou = sum(VoixPoutou),
pourcentage_poutou = total_poutou / total_votes * 100,
total_dupontaignan = sum(VoixDupontAignan),
pourcentage_dupontaignan = total_dupontaignan / total_votes * 100)
# Couleur pour les candidats
total_votes = sum(dataset_cleaned$total_votes)
candidate_pourcentage <- c("N. Arthaud" = sum(dataset_cleaned$total_arthaud)/total_votes*100,
"P. Poutou" = sum(dataset_cleaned$total_poutou)/total_votes*100,
"F. Roussel" = sum(dataset_cleaned$total_roussel)/total_votes*100,
"J-L. Mélenchon" = sum(dataset_cleaned$total_melenchon)/total_votes*100,
"A. Hidalgo" = sum(dataset_cleaned$total_hidalgo)/total_votes*100,
"Y. Jadot" = sum(dataset_cleaned$total_jadot)/total_votes*100,
"E. Macron" = sum(dataset_cleaned$total_macron)/total_votes*100,
"J. Lassalle" = sum(dataset_cleaned$total_lassalle)/total_votes*100,
"V. Pecresse" = sum(dataset_cleaned$total_pecresse)/total_votes*100,
"M. Le Pen" = sum(dataset_cleaned$total_lepen)/total_votes*100,
"N. Dupont-Aignan" = sum(dataset_cleaned$total_dupontaignan)/total_votes*100,
"É. Zemmour" = sum(dataset_cleaned$total_zemmour)/total_votes*100)
#pourcentage
candidate_pourcentage_total <- c("N. Arthaud" = "red4",
"P. Poutou" = "red3",
"F. Roussel" = "red2",
"J-L. Mélenchon" = "tomato2",
"A. Hidalgo" = "salmon2",
"Y. Jadot" = "springgreen4",
"E. Macron" = "goldenrod1",
"J. Lassalle" = "lightblue",
"V. Pecresse" = "royalblue1",
"M. Le Pen" = "blue2",
"N. Dupont-Aignan" = "blue3",
"É. Zemmour" = "navyblue")
#Moyenne des données
moy_votes = mean(dataset_cleaned$total_votes)
moy_abs = mean(dataset_cleaned$total_abs)
moy_votes_candidat <- c("N. Arthaud" = mean(dataset_cleaned$total_arthaud),
"P. Poutou" = mean(dataset_cleaned$total_poutou),
"F. Roussel" = mean(dataset_cleaned$total_roussel),
"J-L. Mélenchon" = mean(dataset_cleaned$total_melenchon),
"A. Hidalgo" = mean(dataset_cleaned$total_hidalgo),
"Y. Jadot" = mean(dataset_cleaned$total_jadot),
"E. Macron" = mean(dataset_cleaned$total_macron),
"J. Lassalle" = mean(dataset_cleaned$total_lassalle),
"V. Pecresse" = mean(dataset_cleaned$total_pecresse),
"M. Le Pen" = mean(dataset_cleaned$total_lepen),
"N. Dupont-Aignan" = mean(dataset_cleaned$total_dupontaignan),
"É. Zemmour" = mean(dataset_cleaned$total_zemmour))
moy_votes_candidat_filtre = sort(moy_votes_candidat)
etendue = max(moy_votes_candidat) - min(moy_votes_candidat)
# Données
noms_candidats <- names(moy_votes_candidat_filtre)
moyennes_votes <- unname(moy_votes_candidat_filtre)
# Création du diagramme circulaire
pie(moyennes_votes, labels = "", main = "Répartition des votes par candidat", col = candidate_colors[noms_candidats])
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
View(crime_departement_annee)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_data_filtre)
View(crime_departement_annee)
library(readxl)
library(dplyr)
# Charger le jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Filtrer les données pour exclure les départements avec les codes 971, 972, 973, 974, 975, 976 et NA
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Nettoyer les données et récupérer les crimes par département et par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélectionner les colonnes pertinentes
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
View(crime_data)
View(crime_data_filtre)
View(crime_departement_annee)
