total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "M. Le Pen",
total_zemmour == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "É. Zemmour",
total_melenchon == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "J-L. Mélenchon",
total_hidalgo == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "A. Hidalgo",
total_jadot == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "Y. Jadot",
total_pecresse == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "V. Pécresse",
total_poutou == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "P. Poutou",
total_dupontaignan == max(total_arthaud, total_roussel, total_macron,
total_lassalle, total_lepen, total_zemmour,
total_melenchon, total_hidalgo, total_jadot,
total_pecresse, total_poutou, total_dupontaignan) ~ "N. Dupont-Aignan",
TRUE ~ NA_character_
))
# Couleur pour les candidats
candidate_colors <- c("N. Arthaud" = "red4",
"P. Poutou" = "red3",
"F. Roussel" = "red2",
"J-L. Mélenchon" = "tomato2",
"A. Hidalgo" = "salmon2",
"Y. Jadot" = "springgreen4",
"E. Macron" = "goldenrod1",
"J. Lassalle" = "lightblue",
"V. Pecresse" = "royalblue1",
"M. Le Pen" = "blue2",
"N. Dupont-Aignan" = "blue3",
"É. Zemmour" = "navyblue")
# Apparence de la carte
map_theme <- theme(title = element_text(margin = margin(b = 20, r = 25)), # Ajustement des marges intérieures du titre
plot.title = element_text(margin = margin(b = 20, t = 20)), # Ajustement des marges intérieures du titre principal
plot.subtitle = element_text(margin = margin(b = 20)), # Ajustement des marges intérieures du sous-titre
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major= element_blank(),
panel.background= element_blank())
# Création de la carte
ggplot(result_map, aes(long, lat, group = group, fill = candidat_gagnant)) +
geom_polygon() +
geom_path(color = "white", size = 0.3) + # On ajoute la frontière entre les départements
coord_map() +
scale_fill_manual(values = candidate_colors, name = "Candidat arrivé en tête") +
labs(x = "",
y = "",
title = "Candidat arrivé en tête par département au premier tour des présidentielles 2022",
subtitle = "Données via data.gouv") +
map_theme
graph_reg_lin <- function(x, y , x_lab, y_lab,main_lab) {
modele_regression <- lm(y ~ x)
plot(x, y,
xlab = x_lab,
ylab = y_lab,
main = main_lab,
pch = 19, col = "blue")
abline(modele_regression, col = "red")
legend("topleft", legend = c("Données", "Ligne de régression"),
col = c("blue", "red"), pch = c(19, NA), lty = c(NA, 1),
title = "Légende", cex = 0.3)
}
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_macron, "Total des votes par département","Total des votes pour Macron par département","Relation entre les votes pour Macron et le total des votes")
graph_reg_lin(dataset_cleaned$total_votes, dataset_cleaned$total_arthaud, "Total des votes par département","Total des votes pour Arthaud par département","Relation entre les votes pour Arthaud et le total des votes")
library(class)
# Sélection des variables pour la prédiction
features <- c("total_votes", "total_blancs", "pourcentage_blanc", "total_abs", "pourcentage_abs", "total_arthaud", "pourcentage_arthaud", "total_roussel", "pourcentage_roussel", "total_macron", "pourcentage_macron", "total_lassalle", "pourcentage_lassalle", "total_lepen", "pourcentage_lepen", "total_zemmour", "pourcentage_zemmour", "total_melenchon", "pourcentage_melenchon", "total_hidalgo", "pourcentage_hidalgo", "total_jadot", "pourcentage_jadot", "total_pecresse", "pourcentage_pecresse", "total_poutou", "pourcentage_poutou", "total_dupontaignan", "pourcentage_dupontaignan")
# Création d'une nouvelle colonne 'candidat_gagnant' basée sur le pourcentage le plus élevé
dataset_cleaned$candidat_gagnant <- apply(dataset_cleaned[, grep("pourcentage_", names(dataset_cleaned))], 1, function(x) names(x)[which.max(x)])
# Séparation des données en ensembles d'entraînement et de test
set.seed(123)
train_indices <- sample(nrow(dataset_cleaned), nrow(dataset_cleaned) * 0.7)
train_data <- dataset_cleaned[train_indices, ]
test_data <- dataset_cleaned[-train_indices, ]
# Entraînement du modèle KNN
k <- 3
knn_model <- knn(train = train_data[, features],
test = test_data[, features],
cl = train_data$candidat_gagnant,
k = k)
# Évaluation des performances
accuracy <- sum(knn_model == test_data$candidat_gagnant) / length(test_data$candidat_gagnant)
cat("Précision du modèle KNN :", round(accuracy * 100, 2), "%\n")
# dataset_crime <- read.csv("dataset_crime.csv")
# dataset_chomage <- read_xls("dataset_chomage.xls")
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
View(dataset_cleaned_filtered)
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
head(crime_departement_annee)
View(dataset_cleaned_filtered)
# Supposons que votre dataframe contenant les noms des départements s'appelle "dataset_cleaned_filtered"
# Et qu'il contient la colonne "region" (nom du département)
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered, by = c("CodeDépartement" = "num_dep"))
# Chargement du jeu de données crime_departement_annee
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélection des colonnes utiles à notre analyse
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
View(crime_departement_annee)
# Chargement du jeu de données crime_departement_annee
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélection des colonnes utiles à notre analyse
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Chargement du jeu de données crime_departement_annee
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# Sélection des colonnes utiles à notre analyse
crime_departement_annee <- select(crime_departement_annee, CodeDépartement, annee, total_crimes)
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered, by = c("CodeDépartement" = "num_dep"))
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
crime_departement_annee$CodeDépartement = as.numeric(crime_departement_annee$CodeDépartement)
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered, by = c("CodeDépartement" = "num_dep"))
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered, by = c("CodeDépartement" = "num_dep"))
# Affichage des premières lignes du résultat
head(crime_departement_annee)
View(crime_departement_annee)
View(crime_departement_annee)
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered %>%
select(num_dep, region),
by = c("CodeDépartement" = "num_dep"))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee,
dataset_cleaned_filtered %>%
select(region),
by = c("CodeDépartement" = "num_dep"))
View(crime_departement_annee)
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee,
dataset_cleaned_filtered %>%
select(CodeDépartement, region),
by = "CodeDépartement")
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee,
dataset_cleaned_filtered,
by = "CodeDépartement")
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee, dataset_cleaned_filtered, by = c("CodeDépartement" = "num_dep"))
# Affichage des premières lignes du résultat
head(crime_departement_annee)
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# Jointure avec le dataframe contenant les noms des départements
crime_departement_annee <- left_join(crime_departement_annee,
dataset_cleaned_filtered %>% select(region),
by = "CodeDépartement")
View(crime_departement_annee)
View(crime_data_filtre)
View(crime_data)
View(crime_data_filtre)
View(dataset_cleaned_filtered)
View(dataset_cleaned_filtered)
View(dataset_cleaned_filtered)
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# Merge to keep only the region column from dataset_cleaned_filtered in crime_departement_annee
crime_departement_annee <- merge(x = crime_departement_annee,
y = dataset_cleaned_filtered[, c("num_dep", "region")],
by.x = "CodeDépartement",
by.y = "num_dep",
all.x = TRUE)
# Rename the region column to match the column name in crime_departement_annee
names(crime_departement_annee)[names(crime_departement_annee) == "region"] <- "region"
# Display the first few rows of the result
head(crime_departement_annee)
# Création d'une colonne contenant les numéros de département en les triant dans l'ordre alphabétique
dataset_cleaned_filtered$num_dep <- match(dataset_cleaned_filtered$region, unique(dataset_cleaned_filtered$region))
# Chargement du jeu de données
crime_data <- read_xlsx("dataset_crime.xlsx")
# Exclusion des DOM TOM et Corse
crime_data_filtre <- crime_data %>%
filter(!CodeDépartement %in% c(971, 972, 973, 974, 975, 976, "NA", "2A", "2B"))
# Récupération des crimes par département par année
crime_departement_annee <- crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(total_crimes = sum(faits))
# On ajoute la population par département par année
crime_departement_annee <- left_join(crime_departement_annee,
crime_data_filtre %>%
group_by(CodeDépartement, annee) %>%
summarise(Population = max(POP)),
by = c("CodeDépartement", "annee"))
# Calcul du taux de criminalité par 1000 habitants pour chaque département
crime_departement_annee <- mutate(crime_departement_annee, taux_crime_par_1000 = round((total_crimes / as.numeric(Population)) * 1000, 2))
# Amélioration de l'affichage de l'année en ajoutant le préfixe 20 pour obtenir par exemple 2016
crime_departement_annee$annee <- as.numeric(paste0("20", crime_departement_annee$annee))
crime_departement_annee$CodeDépartement = as.integer(crime_departement_annee$CodeDépartement)
# Merge to keep only the region column from dataset_cleaned_filtered in crime_departement_annee
crime_departement_annee <- merge(x = crime_departement_annee,
y = dataset_cleaned_filtered[, c("num_dep", "region")],
by.x = "CodeDépartement",
by.y = "num_dep",
all.x = TRUE)
# Rename the region column to match the column name in crime_departement_annee
names(crime_departement_annee)[names(crime_departement_annee) == "Département"] <- "region"
# Display the first few rows of the result
head(crime_departement_annee)
View(crime_departement_annee)
